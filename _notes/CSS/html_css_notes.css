/*Specifity:
Most to least:
1. Style attribute(*1000)
2. ID (*100)
3. Class, pseudo-class, attribute (*10)
4. Element, pseudo-element (*1)
*/

/*
SIZES:
1. Absolute(mm, cm, in), (px, pt, pc)
2. Relative:
- em -  2em means twice the current font-size, em can get tricky as it gets it's value relatively from its parent element
- rem -(root em), relative to the font size of the root element of the document, base font-size, by browser default usually this is 16px  
- ex - related to the x-height of a font. The x-height is, roughly, the height of lowercase letters such as a, c, m, or o
*/

h2,
h3 {
    color: green;
}

/*selector with ATTRIBUTE*/

/*selector matches all H1 elements that specify the "title" attribute, whatever its value:*/
h1[title] {
    color: blue;
}

/*selector matches all SPAN elements whose "class" attribute has exactly the value "example":*/
span[class=example] {
    color: blue;
}

/* selector matches all SPAN elements whose "hello" attribute has exactly the value "Cleveland" and whose "goodbye" attribute has exactly the value "Columbus":*/
span[hello="Cleveland"][goodbye="Columbus"] {
    color: blue;
}

/*first selector will match, for example, the value "copyright copyleft copyeditor" for the "rel" attribute( value is a white space-separated list of words, one of which is exactly "copyright"). The second selector will only match when the "href" attribute has the value "http://www.w3.org/"*/
a[rel ~ ="copyright"] {}

a[href="http://www.w3.org/"] {}


/*PSEUDO CLASS*/

p:first-child {
    color: lime;
}

/*PSEUDO ELEMENTS*/

p::first-letter {
    color: red;
    font-size: 150%;
}

/*COMBINATIONS*/
/*child*/
article > p {}

/* inside (article is ancestor of h3) */
article h3 {}

/*ADJACENT SIBLING*/
/*p after article, not inside*/
article + p {}

/* GENERAL SIBLING*/
/*all p at the same level as article*/
article ~ p {}

/*CLASS*/
/*tag.classname*/
p.info {}

/*all elements with specific class regardless tag*/
.classname {
    font-family: Arial;
    text-align: justify;
    word-spacing: 10px;
}

/* ID */
/*#idname*/
#top {}

/*ALL*/
* {}

/*TEXT PROPERTIES*/
p {
    text-align: left;
    /*center, right, justify, start, end, inherit */
    line-height: 150%;
    word-spacing: 10px;
    letter-spacing: 3px;
    text-indent: 30px;
}

/*FONT PROPERTIES*/
p {
    font-family: Tahoma;
    font-size: 1.5em;
    150%;
    font-style: italic;
    font-weight: 600;
    /*bold, bolder etc */
    text-transform: uppercase;
    text-decoration: line-through;
    /*also underline, overline, none etc*/
    color: red;
}

/*LIST*/

ul,
ol {
    list-style-type: none;
    /*    also circle, square, disc, upper/lower-roman/greek/latin, decimal, decimal-leading-zero, lower/upper-alpha*/
    list-style-position: inside;
    /*    also outside*/
    list-style-image: url('example.gif');
}

/*LINKS*/
/*unvisited links: */
a:link {}

/*visited link*/
a:visited {}

a:hover {}

/*to style links when you click on them: */
a:actice {}

/*LINK PROPERTIES*/
a {
    color: aqua;
    cursor: -webkit-grab;
    cursor: grab;
    /*    also: text, pointer, progress, n-resize, help, grabbing, cell, copy, move */
    text-decoration: none;
    /*    also: underline, overline, line-through*/
    background-color: coral;
}

/*PROPERTY VALUES*/
p {
    font-size: 20px;
    line-height: 1.5;
    font-size: 150%;
    font-size: 1.5rem;
    /*    1rem = 16px*/

    color: green;
    color: #008000;
    color: rgb(0, 128, 0);
    /*    #ffffff = # fff, #223344 = #234, #223e44 != #23e4 */


    background-color: rgba(255, 0, 0, 0.5);
    /*    red, green, blue (max 255 each), last argument - opacity (0-white, 1-full color)*/
    background-image: url("http://www.example.com/1.jpg");
    /*    could be local url IMG/logo.png*/
    background-image: linear-gradient(red, yellow);
    background-image: repeating-linear-gradient(red, yellow 10%, green 20%);
    background-image: radial-gradient(red, yellow);
}

/*BACKGROUND IMAGE*/

.hero-image {
    background-image: url("/w3images/photographer.jpg");
    background-color: #cccccc;
    /*    color in case image is unavailable*/
    height: 500px;
    /* must set a specified height*/
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    /* Resize the background image to cover the entire container */
    position: relative;
}

.hero-text {
    text-align: center;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
}

/*BORDER< MARGIN< PADDING*/

article {
    background-color: lightgray;
    width: 300px;
    border: 25px solid green;
    padding: 25px;
    margin: 25px;

    margin: 10px 20px 30px 40px;
    /*    read clockwise: top, right, bottom, left*/
    margin: 10px 20px 40px;
    /*    top, right+left, bottom*/
    margin: 10px 20px;
    /*    top+bottom, right+left*/
}


/*FLOW CONTENT
BLOCK-level:
-h1, h2, ..., h6
-p, pre
-ul, ol
-header, footer, article

PHRASING content
Inline:
-b,i
-strong, em
-sup, sub
-img?
*/

/*DISPLAY PROPERTY*/

p {
    display: none;
    display: block;
    /*    Displays an element as a block element (like <p>). It starts on a new line, and takes up the whole width*/
    display: inline;
    /*    	Displays an element as an inline element (like <span>). Any height and width properties will have no effect*/
    display: inline-block;
    /*    Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you can apply height and width values top and bottom margins/paddings are respected unlike display: inline*/

    display: flex;
    flex-direction: row-reverse;
    /*    also: row, column, column-reverse*/
}
